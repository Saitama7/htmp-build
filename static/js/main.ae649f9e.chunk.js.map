{"version":3,"sources":["providers/LanguageProvider/data/selectors.js","providers/LanguageProvider/index.js","components/Header/styles.js","components/Header/index.js","containers/Header/index.js","components/RouteWithLayout/index.js","App.js","serviceWorker.js","services/requester.js","theme.js","index.js","configureStore.js","utils/history.js","i18n.js","common/constants.js","providers/LanguageProvider/data/state.js","providers/LanguageProvider/data/actions.js","utils/cookies.js","reducers.js","routes.js","assets/images/logo.svg","assets/images/sidebar/organizations.svg","assets/images/sidebar/users.svg","assets/fonts/Golos-Regular.ttf"],"names":["selectLanguage","state","language","initialState","mapStateToProps","createSelector","languageState","locale","connect","props","children","messages","key","React","Children","only","useStyles","makeStyles","theme","root","appbar","boxShadow","background","zIndex","drawer","HeaderComponent","classes","AppBar","className","position","Toolbar","alt","src","Logo","width","height","memo","Header","RouteWithLayout","Layout","layout","Component","component","rest","render","matchProps","banner","overflow","overflowY","scrollBehavior","container","maxWidth","App","id","CssBaseline","routes","map","name","Route","Boolean","window","location","hostname","match","requester","axios","create","baseURL","BASE_URL","interceptors","request","use","config","customConfig","token","getTokenFromCookies","headers","common","Authorization","data","noAuth","multi","Accept","blob","responseType","exposedHeaders","golos","fontFamily","fontStyle","fontDisplay","fontWeight","Golos","createMuiTheme","typography","join","overrides","MuiScopedCssBaseline","palette","primary","light","main","contrastText","MuiTheme","ThemeProvider","store","history","composeEnhancers","compose","middlewares","routerMiddleware","thunkMiddleware","withExtraArgument","api","enhancers","applyMiddleware","createStore","createReducer","injectedReducers","configureStore","MOUNT_NODE","document","getElementById","RootRender","fallback","hasChildNodes","ReactDOM","hydrate","Intl","translationMessages","Promise","resolve","then","all","catch","err","navigator","serviceWorker","ready","registration","unregister","error","console","message","createBrowserHistory","addLocaleData","require","ruLocaleData","kyLocaleData","ruTranslationMessages","kyTranslationMessages","DEFAULT_LOCALE","formatTranslationMessages","defaultFormattedMessages","Object","keys","reduce","formattedMessages","formattedMessage","assign","ru","ky","process","REAT_APP_BASE_URL","localStorage","getItem","COOKIE_KEYS","TOKEN","REFRESH","languageProviderReducer","action","produce","draft","type","cookies","Cookies","get","setTokenToCookies","set","path","sameSite","setRefreshTokenToCookies","rootReducer","combineReducers","router","connectRouter","MainLayout","withRouter","lazy","SimpleLayout","Organizations","Users","Login","defaultPage","sidebar","secure","exact","icon","OrgIcon","UsersIcon","module","exports"],"mappings":"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","file":"static/js/main.ae649f9e.chunk.js","sourcesContent":["import { createSelector } from 'reselect'\nimport { initialState } from './state'\n\n/**\n * Direct selector to the languageToggle state domain\n */\nconst selectLanguage = state => state.language || initialState\n\n/**\n * Select the language locale\n */\n\nconst makeSelectLocale = () => createSelector(\n  selectLanguage,\n  languageState => languageState.locale\n)\n\nexport { selectLanguage, makeSelectLocale }\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { createSelector } from 'reselect'\nimport { IntlProvider } from 'react-intl'\n\nimport { makeSelectLocale } from './data/selectors'\n\nexport function LanguageProvider(props) {\n  const { locale, children, messages } = props\n  return (\n    <IntlProvider\n      locale={locale}\n      key={locale}\n      messages={messages[locale]}\n    >\n      {/* <Context.Provider value={{ locale: locale }}> */}\n      {React.Children.only(children)}\n      {/* </Context.Provider> */}\n    </IntlProvider>\n  )\n}\n\nLanguageProvider.propTypes = {\n  locale: PropTypes.string,\n  messages: PropTypes.object,\n  children: PropTypes.element.isRequired\n}\n\nconst mapStateToProps = createSelector(\n  makeSelectLocale(),\n  locale => ({\n    locale\n  })\n)\n\nexport default connect(\n  mapStateToProps\n  // mapDispatchToProps,\n)(LanguageProvider)\n","import { makeStyles } from '@material-ui/core/styles'\n\nexport const useStyles = makeStyles(theme => ({\n  root: {},\n  appbar: {\n    boxShadow: 'inset 0px -1px 0px #E2E2EA',\n    background: '#FFFFFF',\n    zIndex: theme.zIndex.drawer + 1\n  }\n}))\n","import React from 'react'\n\n// Mui\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\n\nimport Logo from '@assets/images/logo.svg'\nimport { useStyles } from './styles'\n\nfunction HeaderComponent() {\n  const classes = useStyles()\n\n  return (\n    <AppBar className={classes.appbar} position=\"fixed\">\n      <Toolbar>\n        <img alt=\"HTMP\" src={Logo} width=\"74\" height=\"74\" />\n      </Toolbar>\n    </AppBar>\n  )\n}\n\nHeaderComponent.propTypes = {\n\n}\n\nexport default HeaderComponent\n","import React, { memo } from 'react'\n\nimport HeaderComponent from '@components/Header'\n\nfunction HeaderContainer() {\n  return <HeaderComponent />\n}\n\nHeaderContainer.propTypes = {\n\n}\n\nexport default memo(HeaderContainer)\n\n","/**\n *\n * RouteWithLayout\n *\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Route } from 'react-router-dom';\n\nfunction RouteWithLayout(props) {\n  const { layout: Layout, component: Component, ...rest } = props;\n\n  return (\n    <Route\n      {...rest}\n      render={matchProps => (\n        <Layout>\n          <Component {...matchProps} />\n        </Layout>\n      )}\n    />\n  );\n}\n\nRouteWithLayout.propTypes = {\n  component: PropTypes.any.isRequired,\n  layout: PropTypes.any.isRequired,\n};\n\nexport default RouteWithLayout;\n","import React from 'react'\nimport { Switch } from 'react-router-dom'\nimport { CssBaseline } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport Header from '@containers/Header'\nimport RouteWithLayout from '@components/RouteWithLayout'\n\nimport { routes } from './routes'\n\nconst useStyles = makeStyles(() => ({\n  banner: {\n    overflow: 'hidden',\n    overflowY: 'auto',\n    height: '100vh',\n    scrollBehavior: 'smooth'\n  },\n  container: {\n    maxWidth: 1000,\n    background: '#FFF'\n  }\n}))\n\nfunction App() {\n  const classes = useStyles()\n\n  return (\n    <div id=\"scroller\" className={classes.banner}>\n      <CssBaseline />\n      <Header />\n      <Switch>\n        {\n            routes.map(({ name, ...rest }) => {\n              const Route = RouteWithLayout\n              return <Route key={name} {...rest} />\n            })\n          }\n      </Switch>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\n\nimport { BASE_URL } from '@common/constants'\nimport { getTokenFromCookies } from '@utils/cookies'\n\nexport const requester = axios.create({\n  baseURL: BASE_URL\n  // withCredentials: true\n})\n\nrequester.interceptors.request.use(config => {\n  const customConfig = config\n  const token = getTokenFromCookies()\n\n  if (token) {\n    customConfig.headers.common.Authorization = `Bearer ${token}`\n  }\n\n  if (customConfig.data && customConfig.data.noAuth) {\n    delete customConfig.data.noAuth\n    delete customConfig.headers.common.Authorization\n  }\n\n  if (customConfig.data && customConfig.data.multi) {\n    customConfig.headers.common['Content-Type'] = 'multipart/form-data'\n    customConfig.headers.common.Accept = 'multipart/form-data'\n  }\n\n  if (customConfig.blob) {\n    customConfig.responseType = 'blob'\n    customConfig.exposedHeaders = ['Content-Disposition']\n  }\n\n  return customConfig\n})\n","import React from 'react'\nimport { createMuiTheme, ThemeProvider, CssBaseline } from '@material-ui/core'\n\nimport Golos from '@assets/fonts/Golos-Regular.ttf'\n\nconst golos = {\n  fontFamily: 'Golos',\n  fontStyle: 'normal',\n  fontDisplay: 'swap',\n  fontWeight: 400,\n  src: `\n    local('Golos'),\n    local('Golos-Regular'),\n    url(${Golos}) format('ttf')\n  `\n}\n\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: [\n      '-apple-system',\n      'Golos',\n      'Roboto',\n      'sans-serif',\n      '\"Apple Color Emoji\"'\n    ].join(',')\n  },\n  overrides: {\n    MuiScopedCssBaseline: {\n      '@global': {\n        '@font-face': [golos]\n      }\n    }\n  },\n  palette: {\n    primary: {\n      light: '#FFFFFF',\n      main: '#0062FF',\n      // dark: '#19202C',\n      contrastText: '#FFFFFF'\n    }\n  }\n})\n\n// eslint-disable-next-line react/prop-types\nexport default function MuiTheme({ children }) {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      {children}\n    </ThemeProvider>\n  )\n}\n","import React, { Suspense } from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { ConnectedRouter } from 'connected-react-router'\nimport history from '@utils/history'\nimport LanguageProvider from '@providers/LanguageProvider'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport configureStore from './configureStore'\n\n// Import i18n messages\nimport { translationMessages } from './i18n'\n\n// Import Language Provider\n\n// Theme\nimport MuiTheme from './theme'\n\n// Create redux store with history\nconst initialState = {}\nexport const store = configureStore(initialState, history)\nconst MOUNT_NODE = document.getElementById('root')\n\nconst RootRender = messages => (\n  <Provider store={store}>\n    <MuiTheme>\n      <LanguageProvider messages={messages}>\n        <ConnectedRouter history={history}>\n          <Suspense fallback=\"...Loading\">\n            <App />\n          </Suspense>\n        </ConnectedRouter>\n      </LanguageProvider>\n    </MuiTheme>\n  </Provider>\n)\n\nconst render = messages => {\n  if (MOUNT_NODE.hasChildNodes()) {\n    ReactDOM.hydrate(RootRender(messages), MOUNT_NODE)\n  } else {\n    ReactDOM.render(RootRender(messages), MOUNT_NODE)\n  }\n}\n\nif (module.hot) {\n  // Hot reloadable React components and translation json files\n  // modules.hot.accept does not accept dynamic dependencies,\n  // have to be constants at compile-time\n  module.hot.accept(['./i18n', './App'], () => {\n    ReactDOM.unmountComponentAtNode(MOUNT_NODE)\n    render(translationMessages)\n  })\n}\n\n// Chunked polyfill for browsers without Intl support\nif (!window.Intl) {\n  new Promise(resolve => {\n    resolve(import('intl'))\n  })\n    .then(() => Promise.all([import('intl/locale-data/jsonp/ru.js')]))\n    .then(() => render(translationMessages))\n    .catch(err => {\n      throw err\n    })\n} else {\n  render(translationMessages)\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","/**\n * Create the store with dynamic reducers\n */\n\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport { routerMiddleware } from 'connected-react-router'\nimport thunkMiddleware from 'redux-thunk'\nimport { requester } from '@services/requester'\nimport createReducer from './reducers'\n// eslint-disable-next-line import/no-cycle\n\nexport default function configureStore(initialState = {}, history) {\n  let composeEnhancers = compose\n\n  // If Redux Dev Tools and Saga Dev Tools Extensions are installed, enable them\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production' && typeof window === 'object') {\n    /* eslint-disable no-underscore-dangle */\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\n\n    // NOTE: Uncomment the code below to restore support for Redux Saga\n    // Dev Tools once it supports redux-saga version 1.x.x\n    // if (window.__SAGA_MONITOR_EXTENSION__)\n    //   reduxSagaMonitorOptions = {\n    //     sagaMonitor: window.__SAGA_MONITOR_EXTENSION__,\n    //   };\n    /* eslint-enable */\n  }\n\n  // Create the store with two middlewares\n  // 1. sagaMiddleware: Makes redux-sagas work\n  // 2. routerMiddleware: Syncs the location/URL path to the state\n  const middlewares = [\n    routerMiddleware(history),\n    thunkMiddleware.withExtraArgument({ api: requester })\n  ]\n\n  const enhancers = [applyMiddleware(...middlewares)]\n\n  const store = createStore(\n    createReducer(),\n    initialState,\n    composeEnhancers(...enhancers)\n  )\n\n  // Extensions\n  store.injectedReducers = {} // Reducer registry\n\n  // Make reducers hot reloadable, see http://mxs.is/googmo\n  /* istanbul ignore next */\n  const paths = [\n    './reducer',\n    './containers',\n    './pages',\n    './services',\n    './providers'\n  ]\n\n  if (module.hot) {\n    module.hot.accept(paths, () => {\n      store.replaceReducer(createReducer(store.injectedReducers))\n    })\n  }\n\n  return store\n}\n","import { createBrowserHistory } from 'history';\nconst history = createBrowserHistory();\nexport default history;\n","/**\n * i18n.js\n *\n * This will setup the i18n language files and locale data for your app.\n *\n *   IMPORTANT: This file is used by the internal build\n *   script `extract-intl`, and must use CommonJS module syntax\n *   You CANNOT use import/export in this file.\n */\nconst addLocaleData = require('react-intl').addLocaleData; //eslint-disable-line\nconst ruLocaleData = require('react-intl/locale-data/ru')\nconst kyLocaleData = require('react-intl/locale-data/ky')\n\nconst ruTranslationMessages = require('./translations/ru.json')\nconst kyTranslationMessages = require('./translations/ky.json')\n\naddLocaleData(ruLocaleData)\naddLocaleData(kyLocaleData)\n\nexport const DEFAULT_LOCALE = 'ru'\n\n// prettier-ignore\nexport const appLocales = [\n  'ru',\n  'ky'\n]\n\nexport const formatTranslationMessages = (locale, messages) => {\n  const defaultFormattedMessages = locale !== DEFAULT_LOCALE\n    ? formatTranslationMessages(DEFAULT_LOCALE, ruTranslationMessages)\n    : {}\n  const flattenFormattedMessages = (formattedMessages, key) => {\n    const formattedMessage = !messages[key] && locale !== DEFAULT_LOCALE\n      ? defaultFormattedMessages[key]\n      : messages[key]\n    return Object.assign(formattedMessages, { [key]: formattedMessage })\n  }\n  return Object.keys(messages).reduce(flattenFormattedMessages, {})\n}\n\nexport const translationMessages = {\n  ru: formatTranslationMessages('ru', ruTranslationMessages),\n  ky: formatTranslationMessages('ky', kyTranslationMessages)\n}\n","// URL\nconst dev = process.env.REAT_APP_BASE_URL\nconst prod = process.env.REACT_APP_BASE_URL\nexport const BASE_URL = localStorage.getItem('BASE_URL') || prod || dev\n\nconst scope = '__htmp:'\nexport const COOKIE_KEYS = {\n  TOKEN: `${scope}token`,\n  REFRESH: `${scope}refresh`\n}\n\n// Erros\nexport const ERROR_MESSAGES = {\n  NETWORK_ERR: 'Network error'\n}\n","import produce from 'immer'\n\nimport { DEFAULT_LOCALE } from '@/i18n'\nimport { CHANGE_LOCALE } from './actions'\n\nexport const initialState = {\n  locale: DEFAULT_LOCALE\n}\n\n/* eslint-disable default-case, no-param-reassign */\nconst languageProviderReducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case CHANGE_LOCALE:\n      draft.locale = action.locale\n      break\n  }\n})\n\nexport default languageProviderReducer\n","export const CHANGE_LOCALE = 'CHANGE_LOCALE'\n\nexport function changeLocale(languageLocale) {\n  return {\n    type: CHANGE_LOCALE,\n    locale: languageLocale\n  }\n}\n","import Cookies from 'universal-cookie'\nimport { COOKIE_KEYS } from '@common/constants'\n\nconst cookies = new Cookies()\nconst { TOKEN, REFRESH } = COOKIE_KEYS\n\nexport function getTokenFromCookies() {\n  return cookies.get(TOKEN)\n}\n\nexport function setTokenToCookies(token) {\n  cookies.set(TOKEN, token, {\n    path: '/',\n    sameSite: true\n  })\n}\n\nexport function getRefreshTokenFromCookies() {\n  return cookies.get(REFRESH)\n}\n\nexport function setRefreshTokenToCookies(token) {\n  cookies.set(REFRESH, token, {\n    path: '/',\n    sameSite: true\n    // secure: true,\n  })\n}\n\nexport function removeTokensFromCookies() {\n  cookies.remove(REFRESH)\n  cookies.remove(TOKEN)\n}\n","/**\n * Combine all reducers in this file and export the combined reducers.\n */\n\nimport { combineReducers } from 'redux'\nimport { connectRouter } from 'connected-react-router'\n\nimport history from '@utils/history'\nimport languageProviderReducer from '@providers/LanguageProvider/data/state'\n\n/**\n * Merges the main reducer with the router state and dynamically injected reducers\n */\nexport default function createReducer(injectedReducers = {}) {\n  const rootReducer = combineReducers({\n    language: languageProviderReducer,\n    router: connectRouter(history),\n    ...injectedReducers\n  })\n\n  return rootReducer\n}\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\n// Icons\nimport OrgIcon from '@assets/images/sidebar/organizations.svg'\nimport UsersIcon from '@assets/images/sidebar/users.svg'\n\n// layouts\nconst MainLayout = withRouter(\n  React.lazy(() => import('@layouts/Main'))\n)\nconst SimpleLayout = withRouter(\n  React.lazy(() => import('@layouts/SimpleLayout'))\n)\n\n// pages\nconst Organizations = withRouter(\n  React.lazy(() => import('@pages/OrganizationsPage'))\n)\n\nconst Users = withRouter(\n  React.lazy(() => import('@pages/UsersPage'))\n)\n\nconst Login = withRouter(\n  React.lazy(() => import('@pages/LoginPage'))\n)\n\nexport const routes = [\n  {\n    path: '/',\n    name: 'Organizations',\n    component: Organizations,\n    layout: MainLayout,\n    defaultPage: true,\n    sidebar: false,\n    secure: true,\n    exact: true\n  },\n  {\n    path: '/organizations',\n    name: 'Organizations',\n    component: Organizations,\n    layout: MainLayout,\n    defaultPage: true,\n    sidebar: true,\n    icon: OrgIcon,\n    secure: true,\n    exact: true\n  },\n  {\n    path: '/users',\n    name: 'Users',\n    component: Users,\n    layout: MainLayout,\n    defaultPage: false,\n    sidebar: true,\n    icon: UsersIcon,\n    secure: true,\n    exact: true\n  },\n  {\n    path: '/signin',\n    name: 'Sign In',\n    component: Login,\n    layout: SimpleLayout,\n    defaultPage: false,\n    sidebar: false,\n    secure: false,\n    exact: true\n  }\n]\n","module.exports = __webpack_public_path__ + \"static/media/logo.e641a14a.svg\";","module.exports = __webpack_public_path__ + \"static/media/organizations.9e823bdc.svg\";","module.exports = __webpack_public_path__ + \"static/media/users.ab6ee46d.svg\";","module.exports = __webpack_public_path__ + \"static/media/Golos-Regular.913b4373.ttf\";"],"sourceRoot":""}